// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3566.GearDeliveryMechanismCode1Jan12;

import org.usfirst.frc3566.GearDeliveryMechanismCode1Jan12.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc3566.GearDeliveryMechanismCode1Jan12.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton button5RaiseGearHandler;
    public JoystickButton button6LowerGearHandler;
    public JoystickButton button2GearHandlerToDeliveryPosition;
    public JoystickButton button3GearHandlerToGearAcceptPosition;
    public Joystick logitechXBoxController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        logitechXBoxController = new Joystick(0);
        
        button3GearHandlerToGearAcceptPosition = new JoystickButton(logitechXBoxController, 3);
        button3GearHandlerToGearAcceptPosition.whenPressed(new GearHandlerToAcceptGearPosition());
        button2GearHandlerToDeliveryPosition = new JoystickButton(logitechXBoxController, 2);
        button2GearHandlerToDeliveryPosition.whenPressed(new GearHandlerToDeliveryPosition());
        button6LowerGearHandler = new JoystickButton(logitechXBoxController, 6);
        button6LowerGearHandler.whenPressed(new LowerGearHandler());
        button5RaiseGearHandler = new JoystickButton(logitechXBoxController, 5);
        button5RaiseGearHandler.whenPressed(new RaiseGearHandler());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveWithJoySticks", new DriveWithJoySticks());
        SmartDashboard.putData("SetGearInitialPosition", new SetGearInitialPosition());
        SmartDashboard.putData("LowerGearHandler", new LowerGearHandler());
        SmartDashboard.putData("GearHandlerToDeliveryPosition", new GearHandlerToDeliveryPosition());
        SmartDashboard.putData("GearHandlerToAcceptGearPosition", new GearHandlerToAcceptGearPosition());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLogitechXBoxController() {
        return logitechXBoxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public double getLeftStick(){
    	return logitechXBoxController.getRawAxis(1);
    }
    
    public double getRightStick(){
    	return logitechXBoxController.getRawAxis(5);
    }
    
    
}

