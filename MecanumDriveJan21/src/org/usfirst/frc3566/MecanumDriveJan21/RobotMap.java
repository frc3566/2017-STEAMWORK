// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3566.MecanumDriveJan21;

import com.ctre.CANTalon;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	/************************************************************************
	 ************************************************************************
	 *
	 * Set robot edition HERE before pushing code (probably only either 1 or
	 * 2...)
	 *
	 ************************************************************************
	 ***********************************************************************/
	public static final int ROBOT_EDITION = 1;

	/**
	 * Test mode LiveWindow groupings
	 */
	public static final String DRIVETRAIN = "Mecanum Drivetrain", BALL_ELEVATOR = "Ball Elevator", SHOOTER = "Shooter",
			GEAR_HANDLER = "Gear Handler", CLIMBER = "Climber";

	public static CANTalon frontLeft, rearLeft, frontRight, rearRight, gearHandler, ballElevator, shooter, climber;
	public static Servo ballTrigger;

	public static RobotDrive mecanumDriveTrainRobotDrive;

	public static void init() {

		switch (ROBOT_EDITION) {
		case 1:
			frontLeft = new CANTalon(5);
			LiveWindow.addActuator(DRIVETRAIN, "Front Left (CAN 5)", frontLeft);
			frontLeft.setInverted(false);

			rearLeft = new CANTalon(6);
			LiveWindow.addActuator(DRIVETRAIN, "Rear Left (CAN 6)", rearLeft);
			rearLeft.setInverted(false);

			frontRight = new CANTalon(7);
			LiveWindow.addActuator(DRIVETRAIN, "Front Right (CAN 7)", frontRight);
			frontRight.setInverted(true);

			rearRight = new CANTalon(2);
			LiveWindow.addActuator(DRIVETRAIN, "Rear Right (CAN 2)", rearRight);
			rearRight.setInverted(true);

			shooter = new CANTalon(1);
			LiveWindow.addActuator(SHOOTER, "Shooter (CAN 1)", shooter);
			
			ballTrigger = new Servo(0);
			LiveWindow.addActuator(SHOOTER, "Trigger (Servo 0)", ballTrigger);

			gearHandler = new CANTalon(3);
			LiveWindow.addActuator(GEAR_HANDLER, "Gear Handler (CAN 3)", gearHandler);

			ballElevator = new CANTalon(8);
			LiveWindow.addActuator(BALL_ELEVATOR, "Ball Elevator (CAN 8)", ballElevator);
			
			climber = new CANTalon(9);
			LiveWindow.addActuator(CLIMBER, "Climber (CAN 9)", climber);

		case 2:
		default:
			frontLeft = new CANTalon(5);
			LiveWindow.addActuator(DRIVETRAIN, "Front Left (CAN 5)", frontLeft);
			frontLeft.setInverted(true);

			rearLeft = new CANTalon(9);
			LiveWindow.addActuator(DRIVETRAIN, "Rear Left (CAN 9)", rearLeft);
			rearLeft.setInverted(true);

			frontRight = new CANTalon(3);
			LiveWindow.addActuator(DRIVETRAIN, "Front Right (CAN 3)", frontRight);
			frontRight.setInverted(false);

			rearRight = new CANTalon(2);
			LiveWindow.addActuator(DRIVETRAIN, "Rear Right (CAN 2)", rearRight);
			rearRight.setInverted(false);

			shooter = new CANTalon(4);
			LiveWindow.addActuator(SHOOTER, "Shooter (CAN 4)", shooter);

			ballTrigger = new Servo(0);
			LiveWindow.addActuator(SHOOTER, "Trigger (Servo 0)", ballTrigger);

			gearHandler = new CANTalon(1);
			LiveWindow.addActuator(GEAR_HANDLER, "Gear Handler (CAN 1)", gearHandler);

			ballElevator = new CANTalon(7);
			LiveWindow.addActuator(BALL_ELEVATOR, "Ball Elevator (CAN 7)", ballElevator);

			climber = new CANTalon(6);
			LiveWindow.addActuator(CLIMBER, "Climber (CAN 6)", climber);
		}
		
		mecanumDriveTrainRobotDrive = new RobotDrive(frontLeft, rearLeft, frontRight, rearRight);
		mecanumDriveTrainRobotDrive.setSafetyEnabled(true);
		mecanumDriveTrainRobotDrive.setExpiration(0.1);
		mecanumDriveTrainRobotDrive.setSensitivity(0.5);
		mecanumDriveTrainRobotDrive.setMaxOutput(1.0);

	}
}
